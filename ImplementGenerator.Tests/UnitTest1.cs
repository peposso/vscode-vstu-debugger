using System.Reflection;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace ImplementGenerator.Tests;

public class UnitTest1
{
    [Fact]
    public void Test1()
    {
        var compilation = CreateCompilation("""
[GenerateImplement()]
partial class Class : IInterface
{
    dynamic core;

    public Class(dynamic core)
    {
        this.core = core;
    }
}

interface IInterface
{
    int IntValue { get; }

    bool DoSomething(int x, ref string y, out long z);

}
""");

        var generator = new SourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        driver.RunGeneratorsAndUpdateCompilation(compilation, out var outputCompilation, out var diagnostics);

        Assert.Empty(diagnostics);
        Assert.NotNull(outputCompilation);

        var gen = outputCompilation.SyntaxTrees.Last().ToString();
        gen = gen.Replace("\r", "");
        Assert.Equal("""
// <auto-generated />
#pragma warning disable

partial class Class
{
    public int IntValue => core.IntValue;

    public bool DoSomething(int x, ref string y, out long z) => core.DoSomething(x, ref y, out z);

}

""".Replace("\r", ""), gen);
    }

    static Compilation CreateCompilation(string source)
    {
        return CSharpCompilation.Create("compilation",
                new[] { CSharpSyntaxTree.ParseText(source) },
                new[] { MetadataReference.CreateFromFile(typeof(Binder).GetTypeInfo().Assembly.Location) },
                new CSharpCompilationOptions(OutputKind.ConsoleApplication));
    }
}
